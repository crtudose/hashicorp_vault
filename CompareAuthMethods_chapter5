Auth methods
 - vault components that perform authentication and manage identities
 - responsible for assigning identity and policies to a user
 - multiple authentication methods can be enabled depending on your use case (auth methods can be differentiated by human vs system methods)
 - once authenticated, vault will issue a client token used to make all subsequent vault requests (r/w). The fundamental goal of all auth methods is to obtain a token and each token has an associated policy and a TTL
 - default authentication method for a new vault deployment is token

 - tokens are the core method for authentication within vault (most operations in vault require an existing token)
 - the token auth method is responsible for creating and storing tokens (token auth method cannot be disabled) 
 - authentication with external identity (ldap, oidc) will generate a token

 - if you do not supply a token for non-authentication requests, there are no redirects for authentication (will get a 403 access denied)
 - workflow 1. authenticate with credentials 
   2. validate credentials against provider 
   3. generate vault token with policy and ttl 
   4. return token to user 
   5. access secrets in vault using token

 - most auth methods must be enabled before you can see them
 - one or many auth methods can be used at any given time and generally different auth methods are used for different use cases (human vs app)
 - the token auth method is enabled by default, and you cannot enable another nor disable the tokens auth method
 - new vault deployment will use a token for auth
 - only method of auth for a new vault deployment is a root token

 - auth methods can be enabled/disabled and configured using the ui, api, or the cli (we cannot do everything from ui)
 - you must provide a valid token to enable, disable, or modify auth emthods in vault. The vault must also have the proper privileges.
 
 - each auth method is enabled at a path
 - you can choose a path name when you enable the auth method
 - if you do not provide a name, the auth method will be enabled at its default path (path's name is equal to the type of auth method)
 $ vault auth enable approle

 $ vault auth
  - enable
  - disable
  - list
  - tune
  - help

 - enable an auth method at the default path 
 $ vault auth enable approle
 - enable an auth method using a custom path
 $ vault auth enable -path=vault-course -description=MyApps approle (where "auth" is the type of vault object you want to work with, "enable" is the subcommand and "approle" is the type of auth method, "-path" is for customizing the path name)

 - After the auth method has been enabled, use the auth prefix to configure the auth method
 $ vault write auth/<path_name>/<option>
 Example:
 $ vault write auth/approle/role/vault-course secret_id_ttl=10m token_num_uses=10 token_ttl=20m token_max_ttl=30m secret_id_num_uses=40

root@ctudose:~# vault auth enable userpass
Success! Enabled userpass auth method at: userpass/

root@ctudose:~# vault auth list
Path         Type        Accessor                  Description                Version
----         ----        --------                  -----------                -------
token/       token       auth_token_9c496121       token based credentials    n/a
userpass/    userpass    auth_userpass_3c91438f    n/a                        n/a

root@ctudose:~# vault auth list -detailed
Path         Plugin      Accessor                  Default TTL    Max TTL    Token Type         Replication    Seal Wrap    External Entropy Access    Options    Description                UUID                                    Version    Running Version          Running SHA256    Deprecation Status
----         ------      --------                  -----------    -------    ----------         -----------    ---------    -----------------------    -------    -----------                ----                                    -------    ---------------          --------------    ------------------
token/       token       auth_token_9c496121       system         system     default-service    replicated     false        false                      map[]      token based credentials    71a6d904-bd0a-69ec-b3a3-baca996abf8e    n/a        v1.18.3+builtin.vault    n/a               n/a
userpass/    userpass    auth_userpass_3c91438f    system         system     default-service    replicated     false        false                      map[]      n/a                        4aa10874-4701-6e48-340b-d67aaa69b1fe    n/a        v1.18.3+builtin.vault    n/a               supported

root@ctudose:~# vault auth list
Path             Type        Accessor                  Description                Version
----             ----        --------                  -----------                -------
token/           token       auth_token_9c496121       token based credentials    n/a
userpass/        userpass    auth_userpass_3c91438f    n/a                        n/a
vault-course/    userpass    auth_userpass_d36b6775    n/a                        n/a
root@ctudose:~# vault auth disable userpass
Success! Disabled the auth method (if it existed) at: userpass/
root@ctudose:~# vault auth list
Path             Type        Accessor                  Description                Version
----             ----        --------                  -----------                -------
token/           token       auth_token_9c496121       token based credentials    n/a
vault-course/    userpass    auth_userpass_d36b6775    n/a                        n/a
root@ctudose:~# vault auth disable vault-course
Success! Disabled the auth method (if it existed) at: vault-course/
root@ctudose:~# vault auth list
Path      Type     Accessor               Description                Version
----      ----     --------               -----------                -------
token/    token    auth_token_9c496121    token based credentials    n/a
root@ctudose:~# vault auth enable -path=bryan -description="local credentials for vault" userpass
Success! Enabled userpass auth method at: bryan/
root@ctudose:~# vault auth list
Path      Type        Accessor                  Description                    Version
----      ----        --------                  -----------                    -------
bryan/    userpass    auth_userpass_efd6fc45    local credentials for vault    n/a
token/    token       auth_token_9c496121       token based credentials        n/a
root@ctudose:~# vault auth tune -default-lease-ttl=24h bryan/
Success! Tuned the auth method at: bryan/
root@ctudose:~# vault auth list -detailed
Path      Plugin      Accessor                  Default TTL    Max TTL    Token Type         Replication    Seal Wrap    External Entropy Access    Options    Description                    UUID                                    Version    Running Version          Running SHA256    Deprecation Status
----      ------      --------                  -----------    -------    ----------         -----------    ---------    -----------------------    -------    -----------                    ----                                    -------    ---------------          --------------    ------------------
bryan/    userpass    auth_userpass_efd6fc45    86400          system     default-service    replicated     false        false                      map[]      local credentials for vault    34e74bc0-7645-48d8-1843-303d5d27a0c1    n/a        v1.18.3+builtin.vault    n/a               supported
token/    token       auth_token_9c496121       system         system     default-service    replicated     false        false                      map[]      token based credentials        71a6d904-bd0a-69ec-b3a3-baca996abf8e    n/a        v1.18.3+builtin.vault    n/a               n/a
root@ctudose:~# vault write auth/bryan/users/krausen password=vault policies=bryan
Success! Data written to: auth/bryan/users/krausen
root@ctudose:~# vault list auth/bryan/users
Keys
----
krausen

root@ctudose:~# vault read auth/bryan/users/krausen
Key                        Value
---                        -----
policies                   [bryan]
token_bound_cidrs          []
token_explicit_max_ttl     0s
token_max_ttl              0s
token_no_default_policy    false
token_num_uses             0
token_period               0s
token_policies             [bryan]
token_ttl                  0s
token_type                 default
root@ctudose:~# vault auth enable approle
Success! Enabled approle auth method at: approle/
root@ctudose:~# vault write auth/approle/role/bryan token_ttl=20m policies=bryan
Success! Data written to: auth/approle/role/bryan

#send API request to vault server using token header post type request and add data using "--data" to call api endpoints
root@ctudose:~# curl --header "X-Vault-Token:hv" --request POST --data @auth.json http://127.0.0.1:8200/v1/sys/auth/approle
{"errors":["path is already in use at approle/"]}

root@ctudose:~# vault auth list
Path        Type        Accessor                  Description                    Version
----        ----        --------                  -----------                    -------
approle/    approle     auth_approle_0d1b7aa0     n/a                            n/a
bryan/      userpass    auth_userpass_efd6fc45    local credentials for vault    n/a
token/      token       auth_token_9c496121       token based credentials        n/a

#create role using api using POST request type and provide data from file called policies to create new app role
root@ctudose:~# curl --header "X-Vault-Token:hv" --request POST --data @policies.json http://127.0.0.1:8200/v1/sys/auth/approle/role/vaultcourse

#fetch role id of vaultcourse
root@ctudose:/etc/vault.d# curl --header "X-Vault-Token:hf" http://127.0.0.1:8200/v1/auth/approle/role/vaultcourse/role-id | jq
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100    64  100    64    0     0  50513      0 --:--:-- --:--:-- --:--:-- 64000
root@ctudose:/etc/vault.d# curl --header "X-Vault-Token:hf" http://127.0.0.1:8200/v1/auth/approle/role/vaultcourse/secret-id | jq
>> returns "missing client token"

$ curl --request POST --header "X-Vault-Token:hf" http://127.0.0.1:8200/v1/auth/approle/role/vaultcourse/secret-id | jq
>> we grab the secret id from output

#vault authentication using cli
There are a few ways to authenticate to vault when using the cli. 
 - use the $vault login command and authenticate usign a token or another auth method and makes use of a token helper
 - use the VAULT_TOKEN environment variable (used if you already have a token)
$ vault login s.x # by default, vault login uses a "token" method
$ vault login -method=userpass username=bryan ("-method" is the auth method used to authenticate and "username" is the argument for passing additional data)
 - token helper caches the token after authentication which stores the token in a local file so it can be referenced for subsequent requests
 - anytime you login, do a vault login, it does not matter which auth method you're going to use it's going to create .vault-token file
 - as workflow 1. initial authentication 2. returns token 3. creates token helper file 4. request for secret 

Parsing the json response to obtain the vault token
$ export VAULT_ADDR="https://vault.example.com:8200"
$ export VAULT_FORMAT=json
$ OUTPUT=$(vault write auth/approle/login role_id="1234567" secret_id="12323rwgf")
$ VAULT_TOKEN=$(echo $OUTPUT | jq '.auth.client_token' -j)
$ vault login $VAULT_TOKEN
>>> we are authenticating to vault using approle and providing a role id and secret id and output variable is storing the response
>>> we are going to set vault token environment variable token that we get from output
>>> vault token equals the parse of the output using jq
