Auth methods
 - vault components that perform authentication and manage identities
 - responsible for assigning identity and policies to a user
 - multiple authentication methods can be enabled depending on your use case (auth methods can be differentiated by human vs system methods)
 - once authenticated, vault will issue a client token used to make all subsequent vault requests (r/w). The fundamental goal of all auth methods is to obtain a token and each token has an associated policy and a TTL
 - default authentication method for a new vault deployment is token

 - tokens are the core method for authentication within vault (most operations in vault require an existing token)
 - the token auth method is responsible for creating and storing tokens (token auth method cannot be disabled) 
 - authentication with external identity (ldap, oidc) will generate a token

 - if you do not supply a token for non-authentication requests, there are no redirects for authentication (will get a 403 access denied)
 - workflow 1. authenticate with credentials 
   2. validate credentials against provider 
   3. generate vault token with policy and ttl 
   4. return token to user 
   5. access secrets in vault using token

 - most auth methods must be enabled before you can see them
 - one or many auth methods can be used at any given time and generally different auth methods are used for different use cases (human vs app)
 - the token auth method is enabled by default, and you cannot enable another nor disable the tokens auth method
 - new vault deployment will use a token for auth
 - only method of auth for a new vault deployment is a root token

 - auth methods can be enabled/disabled and configured using the ui, api, or the cli (we cannot do everything from ui)
 - you must provide a valid token to enable, disable, or modify auth emthods in vault. The vault must also have the proper privileges.
 
 - each auth method is enabled at a path
 - you can choose a path name when you enable the auth method
 - if you do not provide a name, the auth method will be enabled at its default path (path's name is equal to the type of auth method)
 $ vault auth enable approle

 $ vault auth
  - enable
  - disable
  - list
  - tune
  - help

 - enable an auth method at the default path 
 $ vault auth enable approle
 - enable an auth method using a custom path
 $ vault auth enable -path=vault-course -description=MyApps approle (where "auth" is the type of vault object you want to work with, "enable" is the subcommand and "approle" is the type of auth method, "-path" is for customizing the path name)

 - After the auth method has been enabled, use the auth prefix to configure the auth method
 $ vault write auth/<path_name>/<option>
 Example:
 $ vault write auth/approle/role/vault-course secret_id_ttl=10m token_num_uses=10 token_ttl=20m token_max_ttl=30m secret_id_num_uses=40

root@ctudose:~# vault auth enable userpass
Success! Enabled userpass auth method at: userpass/

root@ctudose:~# vault auth list
Path         Type        Accessor                  Description                Version
----         ----        --------                  -----------                -------
token/       token       auth_token_9c496121       token based credentials    n/a
userpass/    userpass    auth_userpass_3c91438f    n/a                        n/a

root@ctudose:~# vault auth list -detailed
Path         Plugin      Accessor                  Default TTL    Max TTL    Token Type         Replication    Seal Wrap    External Entropy Access    Options    Description                UUID                                    Version    Running Version          Running SHA256    Deprecation Status
----         ------      --------                  -----------    -------    ----------         -----------    ---------    -----------------------    -------    -----------                ----                                    -------    ---------------          --------------    ------------------
token/       token       auth_token_9c496121       system         system     default-service    replicated     false        false                      map[]      token based credentials    71a6d904-bd0a-69ec-b3a3-baca996abf8e    n/a        v1.18.3+builtin.vault    n/a               n/a
userpass/    userpass    auth_userpass_3c91438f    system         system     default-service    replicated     false        false                      map[]      n/a                        4aa10874-4701-6e48-340b-d67aaa69b1fe    n/a        v1.18.3+builtin.vault    n/a               supported

root@ctudose:~# vault auth list
Path             Type        Accessor                  Description                Version
----             ----        --------                  -----------                -------
token/           token       auth_token_9c496121       token based credentials    n/a
userpass/        userpass    auth_userpass_3c91438f    n/a                        n/a
vault-course/    userpass    auth_userpass_d36b6775    n/a                        n/a
root@ctudose:~# vault auth disable userpass
Success! Disabled the auth method (if it existed) at: userpass/
root@ctudose:~# vault auth list
Path             Type        Accessor                  Description                Version
----             ----        --------                  -----------                -------
token/           token       auth_token_9c496121       token based credentials    n/a
vault-course/    userpass    auth_userpass_d36b6775    n/a                        n/a
root@ctudose:~# vault auth disable vault-course
Success! Disabled the auth method (if it existed) at: vault-course/
root@ctudose:~# vault auth list
Path      Type     Accessor               Description                Version
----      ----     --------               -----------                -------
token/    token    auth_token_9c496121    token based credentials    n/a
root@ctudose:~# vault auth enable -path=bryan -description="local credentials for vault" userpass
Success! Enabled userpass auth method at: bryan/
root@ctudose:~# vault auth list
Path      Type        Accessor                  Description                    Version
----      ----        --------                  -----------                    -------
bryan/    userpass    auth_userpass_efd6fc45    local credentials for vault    n/a
token/    token       auth_token_9c496121       token based credentials        n/a
root@ctudose:~# vault auth tune -default-lease-ttl=24h bryan/
Success! Tuned the auth method at: bryan/
root@ctudose:~# vault auth list -detailed
Path      Plugin      Accessor                  Default TTL    Max TTL    Token Type         Replication    Seal Wrap    External Entropy Access    Options    Description                    UUID                                    Version    Running Version          Running SHA256    Deprecation Status
----      ------      --------                  -----------    -------    ----------         -----------    ---------    -----------------------    -------    -----------                    ----                                    -------    ---------------          --------------    ------------------
bryan/    userpass    auth_userpass_efd6fc45    86400          system     default-service    replicated     false        false                      map[]      local credentials for vault    34e74bc0-7645-48d8-1843-303d5d27a0c1    n/a        v1.18.3+builtin.vault    n/a               supported
token/    token       auth_token_9c496121       system         system     default-service    replicated     false        false                      map[]      token based credentials        71a6d904-bd0a-69ec-b3a3-baca996abf8e    n/a        v1.18.3+builtin.vault    n/a               n/a
root@ctudose:~# vault write auth/bryan/users/krausen password=vault policies=bryan
Success! Data written to: auth/bryan/users/krausen
root@ctudose:~# vault list auth/bryan/users
Keys
----
krausen

root@ctudose:~# vault read auth/bryan/users/krausen
Key                        Value
---                        -----
policies                   [bryan]
token_bound_cidrs          []
token_explicit_max_ttl     0s
token_max_ttl              0s
token_no_default_policy    false
token_num_uses             0
token_period               0s
token_policies             [bryan]
token_ttl                  0s
token_type                 default
root@ctudose:~# vault auth enable approle
Success! Enabled approle auth method at: approle/
root@ctudose:~# vault write auth/approle/role/bryan token_ttl=20m policies=bryan
Success! Data written to: auth/approle/role/bryan

#send API request to vault server using token header post type request and add data using "--data" to call api endpoints
root@ctudose:~# curl --header "X-Vault-Token:hv" --request POST --data @auth.json http://127.0.0.1:8200/v1/sys/auth/approle
{"errors":["path is already in use at approle/"]}

root@ctudose:~# vault auth list
Path        Type        Accessor                  Description                    Version
----        ----        --------                  -----------                    -------
approle/    approle     auth_approle_0d1b7aa0     n/a                            n/a
bryan/      userpass    auth_userpass_efd6fc45    local credentials for vault    n/a
token/      token       auth_token_9c496121       token based credentials        n/a

#create role using api using POST request type and provide data from file called policies to create new app role
root@ctudose:~# curl --header "X-Vault-Token:hv" --request POST --data @policies.json http://127.0.0.1:8200/v1/sys/auth/approle/role/vaultcourse

#fetch role id of vaultcourse
root@ctudose:/etc/vault.d# curl --header "X-Vault-Token:hf" http://127.0.0.1:8200/v1/auth/approle/role/vaultcourse/role-id | jq
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100    64  100    64    0     0  50513      0 --:--:-- --:--:-- --:--:-- 64000
root@ctudose:/etc/vault.d# curl --header "X-Vault-Token:hf" http://127.0.0.1:8200/v1/auth/approle/role/vaultcourse/secret-id | jq
>> returns "missing client token"

$ curl --request POST --header "X-Vault-Token:hf" http://127.0.0.1:8200/v1/auth/approle/role/vaultcourse/secret-id | jq
>> we grab the secret id from output

#vault authentication using cli
===============================
There are a few ways to authenticate to vault when using the cli. 
 - use the $vault login command and authenticate usign a token or another auth method and makes use of a token helper
 - use the VAULT_TOKEN environment variable (used if you already have a token)
$ vault login s.x # by default, vault login uses a "token" method
$ vault login -method=userpass username=bryan ("-method" is the auth method used to authenticate and "username" is the argument for passing additional data)
 - token helper caches the token after authentication which stores the token in a local file so it can be referenced for subsequent requests
 - anytime you login, do a vault login, it does not matter which auth method you're going to use it's going to create .vault-token file
 - as workflow 1. initial authentication 2. returns token 3. creates token helper file 4. request for secret 

Parsing the json response to obtain the vault token
$ export VAULT_ADDR="https://vault.example.com:8200"
$ export VAULT_FORMAT=json
$ OUTPUT=$(vault write auth/approle/login role_id="1234567" secret_id="12323rwgf")
$ VAULT_TOKEN=$(echo $OUTPUT | jq '.auth.client_token' -j)
$ vault login $VAULT_TOKEN
>>> we are authenticating to vault using approle and providing a role id and secret id and output variable is storing the response
>>> we are going to set vault token environment variable token that we get from output
>>> vault token equals the parse of the output using jq

#login using okta and username and password
root@ctudose:~# vault login -method=okta username=bryan@krausen.io
>> after the login succeeds we will see vault-token file with token stored 

root@ctudose:~# vault auth enable azure
Success! Enabled azure auth method at: azure/
root@ctudose:~# vault auth disable azure
Success! Disabled the auth method (if it existed) at: azure/
root@ctudose:~# vault policy list
default
secret-policy
unseal
root

# vault authentication using the API
===============================
Authentication requests to the vault http api return a json response that include: 
 - the token
 - the token accessor
 - information about attached policies
It is up to the user to parse the response for the token and use that token for any subsequent requests to vault

Authenticating with an auth post json method where auth.json contains role_id and secret_id
$ curl --request POST --data @auth.json https://vault.example.com:8200/v1/auth/approle/login
 - in the response we expect to see service token and policies associated with our token

$ curl --request POST --data @password.json https://127.0.0.1:8200/v1/auth/okta/login/bryan@krausen.io | jq
which will return a token

$ curl --header "X-Vault-Token": s.x" http://127.0.0.1:8200/v1/secret/data/app01 | jq

# vault entities
===============================
Vault creates an entity and attaches an alias to it if a corresponding entity doesn't already exist.
 - this is done using the identity secrets engine, which manages internal identities that are recognized by vault
 - an entity is a representation of a single person or system used to log into vault. Each has a unique value. Entity is made up of zero or more aliases.
 - alias is a combination of the auth method plus some identification. It is a mapping between an entity and auth method.
 - auth options - userpass, ldap, github
An entity can be manually created to map multiple entities for a single user to provide more efficient authorization management
Any tokens that are created for the entity inherit the capabilities that are granted by alias.

1. authenticate with ldap credentials
2. validate with ldap
3. return a vault token (token inherits capabilities granted by both policies)

$ vault policy list
$ vault write auth/userpass/users/bryan password=bryan policies=kv-policy # create new user for login
$ vault policy read kv-policy
$ vault policy read manager
$ vault login -method=userpass username=bryan  # by loggin in, we can see that we have a new token and it has kv-policy assigned which allows read to certain path
$ vault kv get kv/automation
$ vault kv get kv/operations/admin # returns permission denied 403 with no access
$ vault auth list # permission denied with non-root user
$ vault login root-token
$ vault write identity/entity name="Bryan Krausen" policies=manager
# we will now create an entity alias, we will take our userpass user and add it as an entity alias to this new entity we just created
$ vault write identity/entity-alias name="bryan" canonical_id="dfd" mount_accessor="g43"

$ vault login -method=userpass username=bryan 
# because this user is not an entity that we created, we also get the policy that is assigned to the entity itself
# we have the capabilities from the kv-policy and manager policies
$ vault kv get kv/automation
$ vault kv get kv/operations/admin

# vault groups
===============================
 - group can contain multiple entities as its members
 - can also have subgroups
 - can be set on the group and the permissions will be granted to all members of the group
 - token inherits capabilities granted byt alias, entity and the group
 - internal group = group created in vault to group entities to propagate identical permissions (created manually)
 - external group = groups which vault infers and creates based on group associations coming from auth methods (created manually or automatically)

 - internal groups can be used to easily manage permissions for entities 
 - frequenctly used when using vault namespaces to propagate permissions down to child namespaces (helpful when you do not want to configure auth method on every single namespace)
 - external groups are used to set permissions based on group membership from an external identity provider, such as ldap, okta, or oidc provider
 - allows you to set up once in vault and continue manage permissions in the identity provider (group name must match the group name in your identity provider)

# choosing an auth method
============================
 - certain auth methods are ideal or different use cases
 - many auth methods may satisfy the requirements, but often there's one that works the best for a situation
 - in contrast, just because you are using a certain platform does not mean you need to use the related auth method
 - example: azure VMs can authenticate using the azure auth method
 - it's usually easy to eliminate auth methods based on the way they operate or integrate with applications 
 - frequently rotated: generally means a dynamic credential. Meet requirements (aws, ldap, aure, gcp, k8s) Does not meet requirements (userpass, tls, approle)
 - remove secrets from process or build pipeline: generally means a dynamic or integrated credential. Meets requirements (aws, azure, gcp, k8s) does not meet requirements (userpass, ldap)
 - use existing user credentials: generally means you should integrate with an existing identity provider. Meets the requirement: (oidc, ldap, okta, github). Does not meet requirements (userpass, aws, azure, gcp)

human vs system auth methods
=============================
 - **human based** with an existing identity provider
 - requires a hands-on approach to use
 - logging in via prompt or pop-up 
 - often configured with the platforms integrated mfa

 - *system based** auth method
 - uses non-human friendly methodologies (not easy to remember such as tls certificate) 
 - usually integrates with an existing platform
 - vault validates credentials with the platform

$ vault auth list
$ vault auth enable approle

root@ctudose:~# vault auth list
Path        Type        Accessor                  Description                    Version
----        ----        --------                  -----------                    -------
approle/    approle     auth_approle_0d1b7aa0     n/a                            n/a
bryan/      userpass    auth_userpass_efd6fc45    local credentials for vault    n/a
token/      token       auth_token_9c496121       token based credentials        n/a
root@ctudose:~# vault write auth/approle/role/bryan policies=bryan token_ttl=20m
Success! Data written to: auth/approle/role/bryan

root@ctudose:~# vault list auth/approle/role/bryan
No value found at auth/approle/role/bryan
root@ctudose:~# vault list auth/approle/role
Keys
----
bryan
root@ctudose:~# vault read auth/approle/role/bryan/role-id
Key        Value
---        -----
role_id    f9418df6-4dc5-1236-b53b-d0bf28b5c125

root@ctudose:~# vault write -force auth/approle/role/bryan/secret-id
Key                   Value
---                   -----
secret_id             60aa0b68-415c-3c3a-e0bd-193d403602d5
secret_id_accessor    05c3ef47-c237-311e-cc13-0eb4ed8ffcfe
secret_id_num_uses    0
secret_id_ttl         0s
root@ctudose:~# vault write auth/approle/login role_id=f9418df6-4dc5-1236-b53b-d0bf28b5c125 secret_id=60aa0b68-415c-3c3a-e0bd-193d403602d5
Key                     Value
---                     -----
token                   hvs
token_accessor          6rBpylfXEiQoR8bHVuGsLejT
token_duration          20m
token_renewable         true
token_policies          ["bryan" "default"]
identity_policies       []
policies                ["bryan" "default"]
token_meta_role_name    bryan

Lab approle auth method
--------------------------
# Enable AppRole auth if not yet enabled:
# Log in with a valid token
root@ctudose:~# vault login hvs.
Success! You are now authenticated. The token information displayed below
is already stored in the token helper. You do NOT need to run "vault login"
again. Future Vault requests will automatically use this token.

Key                  Value
---                  -----
token                hvs.
token_accessor       YxK
token_duration       ∞
token_renewable      false
token_policies       ["root"]
identity_policies    []
policies             ["root"]

# Validate that AppRole is already enabled at the approle/ path
root@ctudose:~# vault auth list
Path        Type        Accessor                  Description                    Version
----        ----        --------                  -----------                    -------
approle/    approle     auth_approle_0d1b7aa0     n/a                            n/a
bryan/      userpass    auth_userpass_efd6fc45    local credentials for vault    n/a
token/      token       auth_token_9c496121       token based credentials        n/a

# create approle
root@ctudose:~# vault policy write app-policy - <<EOF
path "secret/data/app/*" {
  capabilities = ["read", "list"]
}
EOF
Success! Uploaded policy: app-policy

# Get RoleID
root@ctudose:~# vault read auth/approle/role/my-app/role-id
Key        Value
---        -----
role_id    94c81fa1-c483-8600-ae2a-d8b8e566be2d

# generate secretID
root@ctudose:~# vault write -f auth/approle/role/my-app/secret-id
Key                   Value
---                   -----
secret_id             8a901288-be02-8de8-283e-3dbd0420e551
secret_id_accessor    47576674-9b25-ed43-e547-9cfce4e4fb90
secret_id_num_uses    0
secret_id_ttl         0s

# Write a secret to use for testing
root@ctudose:~# vault kv put secret/app/config db_conn=prod-db.krausen.io:3306
Success! Data written to: secret/app/config

# login using approle
root@ctudose:~# vault write auth/approle/login \
    role_id="94c81fa1-c483-8600-ae2a-d8b8e566be2d" \
    secret_id="8a901288-be02-8de8-283e-3dbd0420e551"
Key                     Value
---                     -----
token                   hvs..
token_accessor          cU8RhuT23qDkR2JXyoCQaNVH
token_duration          1h
token_renewable         true
token_policies          ["app-policy" "default"]
identity_policies       []
policies                ["app-policy" "default"]
token_meta_role_name    my-app

root@ctudose:~# export VAULT_TOKEN=hvs
root@ctudose:~# vault kv put secret/app/config api_key="test123"
Success! Data written to: secret/app/config
root@ctudose:~# vault kv get secret/app/config
===== Data =====
Key        Value
---        -----
api_key    test123
root@ctudose:~# vault write auth/approle/role/restricted-app \
    token_policies="app-policy" \
    secret_id_ttl=30m \
    token_num_uses=10 \
    secret_id_num_uses=1 \
    token_ttl=20m
Success! Data written to: auth/approle/role/restricted-app
root@ctudose:~# vault write -f auth/approle/role/restricted-app/secret-id
vault write auth/approle/login \
    role_id="94c81fa1-c483-8600-ae2a-d8b8e566be2d" \
    secret_id="8a901288-be02-8de8-283e-3dbd0420e551"
Key                   Value
---                   -----
secret_id             7796978f-efd4-428a-4fff-bedb8e3f57fc
secret_id_accessor    4c48f3a5-5b87-6d6b-bf46-f343eee7b53b
secret_id_num_uses    1
secret_id_ttl         30m
Key                     Value
---                     -----
token                   hvs..
token_accessor          l3fs7JLFKLdhBNMxayAMNU1L
token_duration          1h
token_renewable         true
token_policies          ["app-policy" "default"]
identity_policies       []
policies                ["app-policy" "default"]
token_meta_role_name    my-app

# okta auth method
=====================
 - we login into okta and create an api key to be used in vault

root@ctudose:~# vault auth list
Path        Type        Accessor                  Description                    Version
----        ----        --------                  -----------                    -------
approle/    approle     auth_approle_0d1b7aa0     n/a                            n/a
bryan/      userpass    auth_userpass_efd6fc45    local credentials for vault    n/a
okta/       okta        auth_okta_2326158d        n/a                            n/a
token/      token       auth_token_9c496121       token based credentials        n/a

root@ctudose:~# vault status
Key             Value
---             -----
Seal Type       shamir
Initialized     true
Sealed          false
Total Shares    5
Threshold       3
Version         1.18.3
Build Date      2024-12-16T14:00:53Z
Storage Type    file
Cluster Name    vault-cluster-08459538
Cluster ID      3b6c2a8b-d20f-0ca8-b53c-ade159be4a6a
HA Enabled      false

$ vault write auth/okta/config base_url="okta.com" org_name="krausen" api_token="23qra"
$ vault read auth/okta/config
root@ctudose:~# vault write auth/okta/users/bryan@krausen.io policies=bryan
Success! Data written to: auth/okta/users/bryan@krausen.io

# auth method with userpass
=====================
root@ctudose:~# vault status
Key             Value
---             -----
Seal Type       shamir
Initialized     true
Sealed          false
Total Shares    5
Threshold       3
Version         1.18.3
Build Date      2024-12-16T14:00:53Z
Storage Type    file
Cluster Name    vault-cluster-08459538
Cluster ID      3b6c2a8b-d20f-0ca8-b53c-ade159be4a6a
HA Enabled      false
root@ctudose:~# vault auth list
Path        Type        Accessor                  Description                    Version
----        ----        --------                  -----------                    -------
approle/    approle     auth_approle_0d1b7aa0     n/a                            n/a
bryan/      userpass    auth_userpass_efd6fc45    local credentials for vault    n/a
okta/       okta        auth_okta_2326158d        n/a                            n/a
token/      token       auth_token_9c496121       token based credentials        n/a
root@ctudose:~# vault auth enable userpass
Success! Enabled userpass auth method at: userpass/
root@ctudose:~# vault write auth/userpass/users/frank password=vault policies=bryan
Success! Data written to: auth/userpass/users/frank
root@ctudose:~# vault write auth/userpass/users/jamie password=cloud policies=bryan
Success! Data written to: auth/userpass/users/jamie
root@ctudose:~# vault list auth/userpass/users
Keys
----
frank
jamie
root@ctudose:~# vault read auth/userpass/users/jamie
Key                        Value
---                        -----
policies                   [bryan]
token_bound_cidrs          []
token_explicit_max_ttl     0s
token_max_ttl              0s
token_no_default_policy    false
token_num_uses             0
token_period               0s
token_policies             [bryan]
token_ttl                  0s
token_type                 default

root@ctudose:~# vault login -method=userpass username=jamie
Password (will be hidden):
Success! You are now authenticated. The token information displayed below
is already stored in the token helper. You do NOT need to run "vault login"
again. Future Vault requests will automatically use this token.

Key                    Value
---                    -----
token                  hvs.C
token_accessor         Ufj
token_duration         768h
token_renewable        true
token_policies         ["bryan" "default"]
identity_policies      []
policies               ["bryan" "default"]
token_meta_username    jamie

root@ctudose:~# vault login -method=userpass username=frank
Password (will be hidden):
Success! You are now authenticated. The token information displayed below
is already stored in the token helper. You do NOT need to run "vault login"
again. Future Vault requests will automatically use this token.

Key                    Value
---                    -----
token                  hvs.v
token_accessor         WQY8dJ27hS2zo4QnOcP32h9Y
token_duration         768h
token_renewable        true
token_policies         ["bryan" "default"]
identity_policies      []
policies               ["bryan" "default"]
token_meta_username    frank

Lab Vault authentication methods labs
====================================
# Enable the auth method:
# Log in with a valid token
$ vault login root

# Enable the auth method
$ vault auth enable userpass
# Create users / # Create admin user
$ vault write auth/userpass/users/admin \
    password="admin123" \
    policies="admin-policy"

# Create regular user
$ vault write auth/userpass/users/user1 \
    password="user123" \
    policies="basic-policy"
# Create basic policies / # Create admin policy
$ vault policy write admin-policy - <<EOF
path "secret/*" {
  capabilities = ["create", "read", "update", "delete", "list"]
}
EOF

# Create basic policy
$ vault policy write basic-policy - <<EOF
path "secret/data/user1/*" {
  capabilities = ["create", "read", "update", "delete", "list"]
}
EOF

# Test authentication:
# Login as admin
vault login -method=userpass \
    username=admin \
    password=admin123

# Test permissions
$ vault kv put secret/test value=123

# Login as user1
$ vault login -method=userpass \
    username=user1 \
    password=user123

# Test restricted permissions
$ vault kv put secret/user1/test value=123
$ vault kv put secret/admin/test value=123  # Should fail
