# unseal with key shards
root@ctudose:~# vault status
Key                Value
---                -----
Seal Type          shamir   >>> shamir - key shards
Initialized        true     >>> has been initialized
Sealed             true     >>> sealed with 3 keys
Total Shares       5
Threshold          3
Unseal Progress    0/3
Unseal Nonce       n/a
Version            1.18.3
Build Date         2024-12-16T14:00:53Z
Storage Type       file
HA Enabled         false

root@ctudose:~# cat /etc/vault.d/vault.hcl
storage "file" {
  path = "opt/vault/data"
}

listener "tcp" {
  address = "0.0.0.0:8200"
  tls_disable = 1
}

api_addr = "http://127.0.0.1:8200"
cluster_addr = "http://127.0.0.1:8201"

ui = true
disable_mlock = true

root@ctudose:~# vault operator unseal Y
Key                Value
---                -----
Seal Type          shamir
Initialized        true
Sealed             true
Total Shares       5
Threshold          3
Unseal Progress    2/3
Unseal Nonce       34b77f2b-dce0-dcb7-55a1-fbd496ca9e1b
Version            1.18.3
Build Date         2024-12-16T14:00:53Z
Storage Type       file
HA Enabled         false
root@ctudose:~# vault operator unseal u
Key             Value
---             -----
Seal Type       shamir
Initialized     true
Sealed          false   <<<<< unseal
Total Shares    5
Threshold       3
Version         1.18.3
Build Date      2024-12-16T14:00:53Z
Storage Type    file
Cluster Name    vault-cluster-08459538
Cluster ID      3b6c2a8b-d20f-0ca8-b53c-ade159be4a6a
HA Enabled      false

root@ctudose:~# vault login h
Success! You are now authenticated. The token information displayed below
is already stored in the token helper. You do NOT need to run "vault login"
again. Future Vault requests will automatically use this token.

Key                  Value
---                  -----
token                h
token_accessor       Y
token_duration       âˆž
token_renewable      false
token_policies       ["root"]  >>> root token policy which never expires
identity_policies    []
policies             ["root"]

root@ctudose:~# vault secrets list
Path          Type         Accessor              Description
----          ----         --------              -----------
cubbyhole/    cubbyhole    cubbyhole_faaca29b    per-token private secret storage
identity/     identity     identity_42e59d53     identity store
secret/       kv           kv_7b18ca03           n/a
sys/          system       system_6d4bcaaa       system endpoints used for control, policy and debugging

#auto unseal
Here's a properly structured `vault.hcl` configuration file for setting up **Azure Key Vault** as a seal mechanism, along with **Storage, Listener, and Cluster settings**.

# Full path: /etc/vault.d/vault.hcl

# Storage Backend Configuration (Example: Integrated Storage using Raft)
storage "raft" {
  path    = "/opt/vault/data"
  node_id = "vault-node-1"
}

# Listener Configuration (Vault API Address)
listener "tcp" {
  address       = "0.0.0.0:8200"
  tls_disable   = 1  # Set to 0 to enable TLS
}

# Cluster Configuration
cluster_addr = "http://0.0.0.0:8201"
api_addr     = "http://0.0.0.0:8200"

# Azure Key Vault Seal Configuration
seal "azurekeyvault" {
  tenant_id      = "your-azure-tenant-id"
  client_id      = "your-azure-client-id"
  client_secret  = "your-azure-client-secret"
  vault_name     = "your-azure-keyvault-name"
  key_name       = "your-key-name"
}
```

### Explanation:
- **Storage (Raft)**: Uses **Integrated Storage** (Raft) for Vault instead of an external storage backend.
- **Listener (API Address)**: Listens on `0.0.0.0:8200` for Vault API requests.
- **Cluster Configuration**: Sets the **API address** and **cluster communication address**.
- **Seal Configuration**: Uses **Azure Key Vault** as a seal mechanism for automatic unsealing.

$ vi /etc/vault.d/vault.hcl
$ systemctl restart vault
$ vault status   >>> we should see Recovery Seal Type
$ vault operator init >>> we get recovery keys instead of seal keys and $ vault status command output will show us false for seal status as it want to azure 
$ vault secrets list
$ vault secrets enable azure
$ vault secrets list >>> will list azure/ path for azure secret

# unseal with transit auto unseal
seal "transit" {
address = " " >>> vault cluster running transit
token = " " >>> acl token to use if enabled
disable_renewal = " "

// key config
key_name = "transit_key_name" # transit key used for encryption/decryption
mount_path = "transit/" # mount path to the transit secret engine
namespace = "ns1/" # namespace path to the transit secret engine

//tls config
tls_ca_cert = "/etc/vault/ca_cert.pem"
tls_client_cert = "/etc/vault/client_cert.pem"
tls_client_key = "/etc/vault/ca_cert.pem"
tls_server_name = "vault"
tls_skip_verify = "false"
}

root@ctudose:~# vault secrets list
Path          Type         Accessor              Description
----          ----         --------              -----------
cubbyhole/    cubbyhole    cubbyhole_faaca29b    per-token private secret storage
identity/     identity     identity_42e59d53     identity store
secret/       kv           kv_7b18ca03           n/a
sys/          system       system_6d4bcaaa       system endpoints used for control, policy and debugging
root@ctudose:~# vault operator seal
Success! Vault is sealed.

# transit auto-unseal for secrets engine | using unseal from cluster2 we can unseal cluster1 using transit feature
# we need to create a key which will be used by other cluster in order to decrypt master key and encryption key
root@ctudose:~# vault secrets list
Path          Type         Accessor              Description
----          ----         --------              -----------
cubbyhole/    cubbyhole    cubbyhole_faaca29b    per-token private secret storage
identity/     identity     identity_42e59d53     identity store
secret/       kv           kv_7b18ca03           n/a
sys/          system       system_6d4bcaaa       system endpoints used for control, policy and debugging
transit/      transit      transit_3b097335      n/a
root@ctudose:~# vault secrets enable transit
Error enabling: Error making API request.

URL: POST http://127.0.0.1:8200/v1/sys/mounts/transit
Code: 400. Errors:

* path is already in use at transit/

root@ctudose:~# vault write -f transit/keys/unseal-key
Key                       Value
---                       -----
allow_plaintext_backup    false
auto_rotate_period        0s
deletion_allowed          false
derived                   false
exportable                false
imported_key              false
keys                      map[1:1743332320]
latest_version            1
min_available_version     0
min_decryption_version    1
min_encryption_version    0
name                      unseal-key
supports_decryption       true
supports_derivation       true
supports_encryption       true
supports_signing          false
type                      aes256-gcm96

root@ctudose:~# vault secrets list
Path          Type         Accessor              Description
----          ----         --------              -----------
cubbyhole/    cubbyhole    cubbyhole_faaca29b    per-token private secret storage
identity/     identity     identity_42e59d53     identity store
secret/       kv           kv_7b18ca03           n/a
sys/          system       system_6d4bcaaa       system endpoints used for control, policy and debugging
transit/      transit      transit_3b097335      n/a    >>> new key created

root@ctudose:~# vault list transit/keys
Keys
----
unseal-key  >> the unseal key which in addition needs a policy and a token that has the policy assigned

# we use the token to give out other cluster permission to access this cluster and then it can use the key to unseal
root@ctudose:/tmp# vault policy list
default
secret-policy
root

root@ctudose:/tmp# vault policy read secret-policy
path "secret/*" {
  capabilities = ["create", "update", "read", "delete", "list"]
}

root@ctudose:/tmp# sudo find / -name "*.hcl"
/etc/vault.d/vault.hcl
/etc/vault.d/secret-policy.hcl

root@ctudose:/etc/vault.d# ls
policy.hcl  secret-policy.hcl  vault.env  vault.hcl  vault.hcl.dpkg-dist
root@ctudose:/etc/vault.d# cat policy.hcl
path "transit/encrypt/unreal-key" {
  capabilities = [ "update" ]
}

path "transit/decrypt/unseal-key" {
  capabilities = [ "update" ]
}
root@ctudose:/etc/vault.d# vault policy write unseal policy.hcl
Success! Uploaded policy: unseal

root@ctudose:/etc/vault.d# vault policy list
default
secret-policy
unseal
root
root@ctudose:/etc/vault.d# vault policy read unseal
path "transit/encrypt/unreal-key" {
  capabilities = [ "update" ]
}

path "transit/decrypt/unseal-key" {
  capabilities = [ "update" ]
}

root@ctudose:/etc/vault.d# vault token create -policy=unseal
Key                  Value
---                  -----
token                h
token_accessor       mULoBRq5CDAL3HBZ4L3LqIlk
token_duration       768h
token_renewable      true
token_policies       ["default" "unseal"]
identity_policies    []
policies             ["default" "unseal"]

----------
cluster2
----------

root@ctudose:/etc/vault.d# cat vault.hcl
storage "file" {
  path = "opt/vault/data"
}

listener "tcp" {
  address = "0.0.0.0:8200"
  tls_disable = 1
}

api_addr = "http://127.0.0.1:8200"
cluster_addr = "http://127.0.0.1:8201"

ui = true
disable_mlock = true

# Here we add to the file:
seal "transit" {
 address = "http://10.0.1.209:8200"
 token = "s.w"
 key_name = "unseal-key"
 mount-path = "transit"
}
$ systemctl restart vault
$ vault status #recovery seal type will be "transit"
